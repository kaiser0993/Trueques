//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Proyecto_Inge_Bases_Web.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TempPIEntities : DbContext
    {
        public TempPIEntities()
            : base("name=TempPIEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Administrador> Administradors { get; set; }
        public virtual DbSet<Canton> Cantons { get; set; }
        public virtual DbSet<Categoria> Categorias { get; set; }
        public virtual DbSet<Cliente> Clientes { get; set; }
        public virtual DbSet<Contrasenas_Anteriores> Contrasenas_Anteriores { get; set; }
        public virtual DbSet<Denuncia> Denuncias { get; set; }
        public virtual DbSet<Fisico> Fisicoes { get; set; }
        public virtual DbSet<ListaAmigo> ListaAmigos { get; set; }
        public virtual DbSet<Pai> Pais { get; set; }
        public virtual DbSet<Producto> Productoes { get; set; }
        public virtual DbSet<Provincia> Provincias { get; set; }
        public virtual DbSet<Registrado> Registradoes { get; set; }
        public virtual DbSet<Relacion_ClienteOfertaEnSubasta> Relacion_ClienteOfertaEnSubasta { get; set; }
        public virtual DbSet<Relacion_ClienteTieneInteresCategoria> Relacion_ClienteTieneInteresCategoria { get; set; }
        public virtual DbSet<Resena> Resenas { get; set; }
        public virtual DbSet<Subasta> Subastas { get; set; }
        public virtual DbSet<SublistasAmigo> SublistasAmigos { get; set; }
        public virtual DbSet<Telefono_Administrador> Telefono_Administrador { get; set; }
        public virtual DbSet<Trueque> Trueques { get; set; }
        public virtual DbSet<Virtual> Virtuals { get; set; }
        public virtual DbSet<Calificaciones_Cliente> Calificaciones_Cliente { get; set; }
        public virtual DbSet<ClientesRegistrado> ClientesRegistrados { get; set; }
        public virtual DbSet<Productos_Info_Clientes> Productos_Info_Clientes { get; set; }
        public virtual DbSet<ProductosUsuario> ProductosUsuarios { get; set; }
        public virtual DbSet<VistaAmigo> VistaAmigos { get; set; }
        public virtual DbSet<VistaCruzada> VistaCruzadas { get; set; }
        public virtual DbSet<VistaNoAmigo> VistaNoAmigoes { get; set; }
    
        public virtual int Insertar(string correoCliente, string nombre, Nullable<double> precioEstimado, string condicion, string descripcion, string pathImagen1, string pathImagen2, string pathImagen3, Nullable<bool> publicado, Nullable<System.DateTime> fechaRegistrado)
        {
            var correoClienteParameter = correoCliente != null ?
                new ObjectParameter("CorreoCliente", correoCliente) :
                new ObjectParameter("CorreoCliente", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var precioEstimadoParameter = precioEstimado.HasValue ?
                new ObjectParameter("PrecioEstimado", precioEstimado) :
                new ObjectParameter("PrecioEstimado", typeof(double));
    
            var condicionParameter = condicion != null ?
                new ObjectParameter("Condicion", condicion) :
                new ObjectParameter("Condicion", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var pathImagen1Parameter = pathImagen1 != null ?
                new ObjectParameter("PathImagen1", pathImagen1) :
                new ObjectParameter("PathImagen1", typeof(string));
    
            var pathImagen2Parameter = pathImagen2 != null ?
                new ObjectParameter("PathImagen2", pathImagen2) :
                new ObjectParameter("PathImagen2", typeof(string));
    
            var pathImagen3Parameter = pathImagen3 != null ?
                new ObjectParameter("PathImagen3", pathImagen3) :
                new ObjectParameter("PathImagen3", typeof(string));
    
            var publicadoParameter = publicado.HasValue ?
                new ObjectParameter("Publicado", publicado) :
                new ObjectParameter("Publicado", typeof(bool));
    
            var fechaRegistradoParameter = fechaRegistrado.HasValue ?
                new ObjectParameter("FechaRegistrado", fechaRegistrado) :
                new ObjectParameter("FechaRegistrado", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insertar", correoClienteParameter, nombreParameter, precioEstimadoParameter, condicionParameter, descripcionParameter, pathImagen1Parameter, pathImagen2Parameter, pathImagen3Parameter, publicadoParameter, fechaRegistradoParameter);
        }
    
        public virtual int spProducto_InsertarProducto(string correoCliente, string nombre, Nullable<double> precioEstimado, string condicion, string descripcion, string pathImagen1, string pathImagen2, string pathImagen3, Nullable<bool> publicado, Nullable<System.DateTime> fechaRegistrado)
        {
            var correoClienteParameter = correoCliente != null ?
                new ObjectParameter("CorreoCliente", correoCliente) :
                new ObjectParameter("CorreoCliente", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var precioEstimadoParameter = precioEstimado.HasValue ?
                new ObjectParameter("PrecioEstimado", precioEstimado) :
                new ObjectParameter("PrecioEstimado", typeof(double));
    
            var condicionParameter = condicion != null ?
                new ObjectParameter("Condicion", condicion) :
                new ObjectParameter("Condicion", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var pathImagen1Parameter = pathImagen1 != null ?
                new ObjectParameter("PathImagen1", pathImagen1) :
                new ObjectParameter("PathImagen1", typeof(string));
    
            var pathImagen2Parameter = pathImagen2 != null ?
                new ObjectParameter("PathImagen2", pathImagen2) :
                new ObjectParameter("PathImagen2", typeof(string));
    
            var pathImagen3Parameter = pathImagen3 != null ?
                new ObjectParameter("PathImagen3", pathImagen3) :
                new ObjectParameter("PathImagen3", typeof(string));
    
            var publicadoParameter = publicado.HasValue ?
                new ObjectParameter("Publicado", publicado) :
                new ObjectParameter("Publicado", typeof(bool));
    
            var fechaRegistradoParameter = fechaRegistrado.HasValue ?
                new ObjectParameter("FechaRegistrado", fechaRegistrado) :
                new ObjectParameter("FechaRegistrado", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spProducto_InsertarProducto", correoClienteParameter, nombreParameter, precioEstimadoParameter, condicionParameter, descripcionParameter, pathImagen1Parameter, pathImagen2Parameter, pathImagen3Parameter, publicadoParameter, fechaRegistradoParameter);
        }
    
        public virtual int spTrueque_InsertarOferta(Nullable<int> productoIdPublicado, string correoPublicador, Nullable<int> productoIdOfertado, string correoOfertante, Nullable<System.DateTime> fecha)
        {
            var productoIdPublicadoParameter = productoIdPublicado.HasValue ?
                new ObjectParameter("productoIdPublicado", productoIdPublicado) :
                new ObjectParameter("productoIdPublicado", typeof(int));
    
            var correoPublicadorParameter = correoPublicador != null ?
                new ObjectParameter("correoPublicador", correoPublicador) :
                new ObjectParameter("correoPublicador", typeof(string));
    
            var productoIdOfertadoParameter = productoIdOfertado.HasValue ?
                new ObjectParameter("productoIdOfertado", productoIdOfertado) :
                new ObjectParameter("productoIdOfertado", typeof(int));
    
            var correoOfertanteParameter = correoOfertante != null ?
                new ObjectParameter("correoOfertante", correoOfertante) :
                new ObjectParameter("correoOfertante", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTrueque_InsertarOferta", productoIdPublicadoParameter, correoPublicadorParameter, productoIdOfertadoParameter, correoOfertanteParameter, fechaParameter);
        }
    
        public virtual int spFisico_Insert(string correoCliente)
        {
            var correoClienteParameter = correoCliente != null ?
                new ObjectParameter("CorreoCliente", correoCliente) :
                new ObjectParameter("CorreoCliente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFisico_Insert", correoClienteParameter);
        }
    
        public virtual int spFisico_Delete(Nullable<int> productoID)
        {
            var productoIDParameter = productoID.HasValue ?
                new ObjectParameter("ProductoID", productoID) :
                new ObjectParameter("ProductoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFisico_Delete", productoIDParameter);
        }
    
        public virtual int sqFisico_Update(Nullable<int> productoID, string correoCliente)
        {
            var productoIDParameter = productoID.HasValue ?
                new ObjectParameter("ProductoID", productoID) :
                new ObjectParameter("ProductoID", typeof(int));
    
            var correoClienteParameter = correoCliente != null ?
                new ObjectParameter("CorreoCliente", correoCliente) :
                new ObjectParameter("CorreoCliente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sqFisico_Update", productoIDParameter, correoClienteParameter);
        }
    
        [DbFunction("TempPIEntities", "funcionNoAmigos")]
        public virtual IQueryable<funcionNoAmigos_Result> funcionNoAmigos(string correoUser)
        {
            var correoUserParameter = correoUser != null ?
                new ObjectParameter("correoUser", correoUser) :
                new ObjectParameter("correoUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<funcionNoAmigos_Result>("[TempPIEntities].[funcionNoAmigos](@correoUser)", correoUserParameter);
        }
    }
}
