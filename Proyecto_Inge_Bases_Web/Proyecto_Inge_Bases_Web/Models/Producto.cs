//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Proyecto_Inge_Bases_Web.Models
{
    using System;
    using System.Configuration;
    using System.Collections.Generic;
    using System.Linq;
    using System.Web;
    using System.ComponentModel.DataAnnotations;
    using System.Data;
    using System.Data.SqlClient;
    using System.Diagnostics;
    using System.Web.Mvc;
    using System.Web.UI.WebControls;
    using Proyecto_Integrador_Bases_Inge.Controllers;

    public partial class Producto
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Producto()
        {
            this.Trueques = new HashSet<Trueque>();
            this.Trueques1 = new HashSet<Trueque>();
            this.Categorias = new HashSet<Categoria>();
            this.Subastas = new HashSet<Subasta>();
        }

        public int ProductoID { get; set; }
        public string CorreoCliente { get; set; }
        public string Nombre { get; set; }
        public double PrecioEstimado { get; set; }
        public string Condicion { get; set; }
        public string Descripcion { get; set; }
        public bool Publicado { get; set; }
        public System.DateTime FechaRegistrado { get; set; }
        public Nullable<System.DateTime> FechaPublicado { get; set; }
        public Nullable<short> Calificacion { get; set; }
        public string PathImagen1 { get; set; }
        public string PathImagen2 { get; set; }
        public string PathImagen3 { get; set; }
        public Nullable<bool> Estado { get; set; }
        public bool Seleccionado { get; set; }

        public virtual Cliente Cliente { get; set; }
        public virtual Fisico Fisico { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Trueque> Trueques { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Trueque> Trueques1 { get; set; }
        public virtual Virtual Virtual { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Categoria> Categorias { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Subasta> Subastas { get; set; }

        /*
         Para hacer los querys
         Func:Este metodo se encarga de realizar inserciones que tienen todos los campos del formulario lleno
         Param:Recibe el producto que se va a insertar (no es necesario que lo reciba, de hecho es algo redundante sin embargo me preocupa que al cambiarlo deje de funcionar as� que por ahora lo dejo as� y para el siguiente sprint lo cambio)
         */
        public string InsertProducto(Producto obj)
        {
            string connStr = GetConnectionString(); //Este string permite la conexi�n con la base para poder hacer consultas
            SqlConnection con = new SqlConnection(connStr); //Se crea la conexi�n con la base utilizando el string, se puede crear esto sin el string pero eventualmente es necesario llamar un m�todo que tiene el objeto para p

            //Esta linea genera el query, sin embargo no se colocan los valores espec�ficos si no que se colocan @atributo, esto es una consulta parametrisada
            //No es necesario hacerla parametrisada pero creo que se presta para inyecc��n de sql (tengo que preguntarle a LG), adem�s me di� m�s problemas hacer la consulta normal
            SqlCommand cmd = new SqlCommand("Insert into Producto (CorreoCliente, Nombre, PrecioEstimado, Condicion, Descripcion, PathImagen1, PathImagen2, PathImagen3, Publicado, FechaRegistrado) " +
            "values(@CorreoCliente, @Nombre, @PrecioEstimado, @Condicion, @Descripcion, @PathImagen1, @PathImagen2, @PathImagen3, @Publicado, @FechaRegistrado)", con); //lo ultimo que recibe es la conexi�n 

            //Este bloque de c�digo lo que hace es asignarle los valores a cada parametro 
            cmd.Parameters.AddWithValue("@CorreoCliente", obj.CorreoCliente);
            cmd.Parameters.AddWithValue("@Nombre", obj.Nombre);
            cmd.Parameters.AddWithValue("@PrecioEstimado", obj.PrecioEstimado);
            cmd.Parameters.AddWithValue("@Condicion", obj.Condicion);
            cmd.Parameters.AddWithValue("@Publicado", obj.Publicado);
            cmd.Parameters.AddWithValue("@FechaRegistrado", obj.FechaRegistrado);
            if (obj.Descripcion != null)
                cmd.Parameters.AddWithValue("@Descripcion", obj.Descripcion);
            else
                cmd.Parameters.AddWithValue("@Descripcion", DBNull.Value);
            if (obj.PathImagen1 != null)
                cmd.Parameters.AddWithValue("@PathImagen1", obj.PathImagen1);
            else
                cmd.Parameters.AddWithValue("@PathImagen1", DBNull.Value);
            if (obj.PathImagen2 != null)
                cmd.Parameters.AddWithValue("@PathImagen2", obj.PathImagen2);
            else
                cmd.Parameters.AddWithValue("@PathImagen2", DBNull.Value);
            if (obj.PathImagen3 != null)
                cmd.Parameters.AddWithValue("@PathImagen3", obj.PathImagen3);
            else
                cmd.Parameters.AddWithValue("@PathImagen3", DBNull.Value);

            //Este try Catch detecta SQL Iyections. 
            try
            {
                con.Open(); //abre la conexi�n con la base
                cmd.ExecuteNonQuery(); //Ejecuta la consulta
                con.Close(); //Cierra la conexi�n
                return "Success";
            }
            catch (Exception es)
            {
                return "ERROR";
            }
        }

        static private string GetConnectionString()
        {
            //El primer string indica la direcci�n del server, esto hay que cambiarlo cuando la base deje de ser local, notese que su utiliza \\ en lugar de \ esto es po un problema de utf-16
            //El segundo es el nombre de la base
            //El tercero maneja las credenciales del usuario que hace la inserci�n, la opci�n que est� ahora es permitida por que es local y  no hay usuarios externos, eso hay que cambiarlo m�s adelante 
            return "Server=(localdb)\\ProjectsV13;" + "database=Proyecto_Inge_Bases_Datos;" + "Integrated Security=true;";
        }

    }
}